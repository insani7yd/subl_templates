<snippet>
	<content><![CDATA[
int Log[int(1e7+7)];

void precomp() {
    Log[1] = 0;
    for (int i = 2; i <= 1e7+7; i++) {
        Log[i] = Log[i/2]+1;
    }
}

// probably best to combine with other precomps

template<typename T> struct sparseTable {
    static const int k = 26;
    vector<vector<T> > st;
    
    sparseTable(vector<T> a) {
        int n = a.size();
        st = vector<vector<T> >(n,vector<T>(k,T(0)));  // T should be ll/long/int

        for(int i = 0; i < n; i++) {
            st[i][0] = a[i];
        }

        for(int j = 1; j < k; j++) {
            for(int i = 0; i + (1<<j) <= n; i++) {
                st[i][j] = st[i][j-1] + st[i+(1<<(j-1))][j-1];     // this line may change based on operation // currently for sum
            }
        }
    }

    T query(int L,int R) {
        T sum = 0;
        for(int j = k-1; j >= 0; j--) {
            if((1<<j) <= R-L+1) {
                sum += st[L][j];
                L += 1<<j;
            }
        }
        return sum;
    }

    T idemQ(int L,int R) {
        int j = Log[R-L+1];
        return min(st[L][j], st[R-(1<<j)+1][j]);
    }
};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>sparse</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
